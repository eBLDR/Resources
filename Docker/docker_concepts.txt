Docker is a tool designed to make it easier to deploy and run applications on
any platform.
Docker is a set of Platform as a Service (PaaS) products that use OS-level
virtualization to develop, ship, deliver, and run applications in packages
called 'containers'. Containers are isolated environments (sandboxes) and
bundle their own software, libraries and configuration files; they can
communicate with each other through well-defined channels. All containers are
run by a single operating-system kernel and are thus more lightweight than
virtual machines.
Docker has a client-server architecture, made of the client (using CLI or REST
API), the server (Docker Daemom), and the containers running on the server. All these
component together are called the Docker Engine.

Image
    A read-only template used to build containers. Images are used to store
    and ship applications. Is an executable package that includes everything
    needed to run an application - the OS, the software, a runtime, libraries,
    environment variables, and configuration files.
    Images are stored either locally or in DockerHub registry
    (https://hub.docker.com).

Container
    A standardized, encapsulated environment that runs applications.
    Is a runtime instance of an image - what the image becomes in memory when
    executed. A container runs natively on Linux and shares the kernel of the
    host machine with other containers.
    Only 1 process should be running on each container. Because the life of a
    container is dependent on its main process - it stops when the main process
    dies.

Service
    Allows containers to be scaled across multiple Docker daemons. The result
    is known as a 'swarm', a set of cooperating daemons that communicate
    through the Docker API.

Volumes
    Volumes are the preferred mechanism for persisting data generated by and
    used by Docker containers. Volumes give to the running container the
    ability to see files on the host machine file's system - they do not
    change the image.
    Volumes allow to decouple a container from storage, to share storage among
    different containers, and attach a volume to a container.

Network
    Connecting different containers into a virtual network. Containers in the
    same network can access one another via IP or via name if specified.
    Networks use driver bridge by default, alternative options are: host,
    overlay, etc.

Dockerfile
    Text file with instructions used to create Docker images.
    Defines the app's environment. It must be in the project's top most level.
