Installation test:
$ docker run hello-world

Display information:
$ docker info

Display stats of memory/CPU usage of containers (dynamic):
$ docker stats

List Docker images:
$ docker images [-a]
$ docker image ls [--all]
-a flag will also show intermediate images (based on Docker image layering)

Details of image:
$ docker image inspect <image_name>

Pull Docker image:
$ docker pull <image_name[:tag]>

Remove specified image:
$ docker image rm <image_name>
-f force removal.

Delete all dnagling images:
$ docker rmi $(docker images -f "dangling=true" -q)

Build a image from Dockerfile found in the working directory:
$ docker build <path>
-t flag can assign a <image_name[:tag]>.

Run an image (includes build if it's not already built):
$ docker run <image_id|image_name[:tag]>
-it flag for interactive mode, it will spawn a shell into the image.
-d flag for running in detached mode.
-p publish a containerâ€™s port(s) to the host - <host_port>:<container_port>
The following binds container's port 8080 to port 80 on 127.0.0.1 of the host
machine:
-p 127.0.0.1:80:8080
--name flag to assign a name to container.
-v to mount|bind volumes, <path_host|volume_name>:<container_path>

List Docker containers (running):
$ docker ps [-a]
$ docker container ls [--all]

Start the container:
$ docker container start <container_id|container_name>

Restart the container:
$ docker container restart <container_id|container_name>

Gracefully stop the container:
$ docker container stop <container_id|container_name>

Force shutdown of the container:
$ docker container kill <container_id|container_name>

Remove specified container:
$ docker container rm <container_id|container_name>

Lists volumes:
$ docker volume ls

Create a volume:
$ docker volume create --name=<volume_name>

Remove a volume:
$ docker volume rm <volume_name>

Inspect a volume:
$ docker volume inspect <volume_name>

Lists networks:
$ docker network ls

Create network:
$ docker network create <network_name>

See the disk space taken by Docker
$ docker system df

Removes unused containers, images and networks:
$ docker system prune --volumes --all
--volumes flag will remove also unused volumes.
--all flag will remove all unused images not just dangling ones.

Clean only dangling images:
$ docker rmi $(docker images -f "dangling=true" -q)

Execute commands in docker container:
$ docker exec -it <container_id> <command>
To spawn a bash terminal inside the container, use /bin/bash as a <command>.

Copying files from container to host:
$ docker cp <container_id>:<full_path_in_container> <full_path_in_host>

And viceversa:
$ docker cp <full_path_in_host> <container_id>:<full_path_in_container>
